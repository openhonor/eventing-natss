/*
Copyright 2021 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "knative.dev/eventing-natss/pkg/apis/sources/v1beta1"
)

// NatssSourceLister helps list NatssSources.
// All objects returned here must be treated as read-only.
type NatssSourceLister interface {
	// List lists all NatssSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NatssSource, err error)
	// NatssSources returns an object that can list and get NatssSources.
	NatssSources(namespace string) NatssSourceNamespaceLister
	NatssSourceListerExpansion
}

// natssSourceLister implements the NatssSourceLister interface.
type natssSourceLister struct {
	indexer cache.Indexer
}

// NewNatssSourceLister returns a new NatssSourceLister.
func NewNatssSourceLister(indexer cache.Indexer) NatssSourceLister {
	return &natssSourceLister{indexer: indexer}
}

// List lists all NatssSources in the indexer.
func (s *natssSourceLister) List(selector labels.Selector) (ret []*v1beta1.NatssSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NatssSource))
	})
	return ret, err
}

// NatssSources returns an object that can list and get NatssSources.
func (s *natssSourceLister) NatssSources(namespace string) NatssSourceNamespaceLister {
	return natssSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatssSourceNamespaceLister helps list and get NatssSources.
// All objects returned here must be treated as read-only.
type NatssSourceNamespaceLister interface {
	// List lists all NatssSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NatssSource, err error)
	// Get retrieves the NatssSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NatssSource, error)
	NatssSourceNamespaceListerExpansion
}

// natssSourceNamespaceLister implements the NatssSourceNamespaceLister
// interface.
type natssSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatssSources in the indexer for a given namespace.
func (s natssSourceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.NatssSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NatssSource))
	})
	return ret, err
}

// Get retrieves the NatssSource from the indexer for a given namespace and name.
func (s natssSourceNamespaceLister) Get(name string) (*v1beta1.NatssSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("natsssource"), name)
	}
	return obj.(*v1beta1.NatssSource), nil
}
